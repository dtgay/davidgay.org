<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <generator uri="http://jekyllrb.com" version="4.0.1">Jekyll</generator>
  
  
  <link href="https://davidgay.org/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://davidgay.org/" rel="alternate" type="text/html" hreflang="en" />
  <updated>2020-06-23T18:57:31-04:00</updated>
  <id>https://davidgay.org//</id>

  
    <title type="html">David Gay</title>
  

  
    <subtitle>Software developer from New York. Writes about software development, apps, websites, music, books, and other interests.</subtitle>
  

  
    <author>
        <name>David Gay</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">JWT Auth in Rails 6 with Knock</title>
      
      
      <link href="https://davidgay.org/programming/jwt-auth-rails-6-knock/" rel="alternate" type="text/html" title="JWT Auth in Rails 6 with Knock" />
      
      <published>2020-06-17T13:15:00-04:00</published>
      <updated>2020-06-23T14:30:00-04:00</updated>
      <id>https://davidgay.org/programming/jwt-auth-rails-6-knock</id>
      <content type="html" xml:base="https://davidgay.org/programming/jwt-auth-rails-6-knock/">&lt;p&gt;This post explains how to set up and use the &lt;a href=&quot;https://github.com/nsarno/knock&quot;&gt;knock gem&lt;/a&gt; for JWT auth in
your Rails 6 API. Currently, the whole knock &lt;a href=&quot;https://github.com/nsarno/knock/pull/248&quot;&gt;situation&lt;/a&gt; is a &lt;a href=&quot;https://github.com/nsarno/knock/issues/250&quot;&gt;bit&lt;/a&gt;
&lt;a href=&quot;https://github.com/nsarno/knock/issues/249&quot;&gt;confusing&lt;/a&gt;. From what I can tell, a new maintainer took over (thank you!)
and is trying to get a solid release out the door, the first in three years.
Unfortunately, the existing docs and blog posts available on knock are
sometimes unclear or outdated. But I figured out how to get things working in
Rails 6, and now you can, too.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;At the time of this writing, the new release, 2.2, hasn’t been pushed out to
RubyGems. So what you want to do is utilize the &lt;a href=&quot;https://github.com/nsarno/knock/pull/248&quot;&gt;unofficial 2.2 release&lt;/a&gt;
by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;knock&lt;/code&gt; to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in this way:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Add JWT authentication&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Need to use this specific commit, which is unofficially the 2.2 release,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   because the new version hasn't been released to RubyGems yet.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;knock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;github: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nsarno/knock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;branch: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;master&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;ref: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9214cd027422df8dc31eb67c60032fbbf8fc100b&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you’ve added that, go ahead and install:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-model&quot;&gt;The Model&lt;/h2&gt;

&lt;p&gt;Presumably, you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; model for use with auth. For this part, &lt;a href=&quot;https://github.com/nsarno/knock/blob/master/README.md&quot;&gt;the
official docs&lt;/a&gt; are solid and I recommend following them. I believe the docs
also have some info on what to do if your model is namespaced, or maybe even
named differently, though I haven’t tried any of that stuff out.&lt;/p&gt;

&lt;p&gt;The main requirement is that you either use &lt;code class=&quot;highlighter-rouge&quot;&gt;has_secure_password&lt;/code&gt; in your
&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; model, or, alternatively, implement an &lt;code class=&quot;highlighter-rouge&quot;&gt;authenticate&lt;/code&gt; method that does
the same sort of thing that the &lt;code class=&quot;highlighter-rouge&quot;&gt;authenticate&lt;/code&gt; method added by
&lt;code class=&quot;highlighter-rouge&quot;&gt;has_secure_password&lt;/code&gt; does (see &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password&quot;&gt;the docs for that method&lt;/a&gt;). For many
people, adding &lt;code class=&quot;highlighter-rouge&quot;&gt;has_secure_password&lt;/code&gt; like this will be all you need:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_secure_password&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Other stuff can be in this class, of course&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The default setup with &lt;code class=&quot;highlighter-rouge&quot;&gt;has_secure_password&lt;/code&gt; assumes that users will be
authenticating with an &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; and not doing anything fancy
to authenticate other than checking the validity of the email/password
combination. &lt;strong&gt;If this isn’t the case, you need to take further steps.&lt;/strong&gt;
Otherwise, you can skip this next section.&lt;/p&gt;

&lt;h3 id=&quot;further-steps-for-non-default-auth&quot;&gt;Further Steps for Non-Default Auth&lt;/h3&gt;

&lt;p&gt;You may want to have auth occur with a &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;, or something
similar, instead of the default &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;. In that case, you need
to override &lt;code class=&quot;highlighter-rouge&quot;&gt;self.from_token_request(request)&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; model. For
instance, if you want to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; instead of an &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt; you’ll need
something like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_token_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This will be nil if no user is found.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reason you need to override this method is because the default
&lt;code class=&quot;highlighter-rouge&quot;&gt;self.from_token_request(request)&lt;/code&gt; looks up the authenticating user by &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt;.
The above version causes the user to be looked up by &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;For my purposes, I had to implement my own &lt;code class=&quot;highlighter-rouge&quot;&gt;authenticate&lt;/code&gt; method as well as
&lt;code class=&quot;highlighter-rouge&quot;&gt;self.from_token_request&lt;/code&gt; as mentioned in &lt;a href=&quot;https://github.com/nsarno/knock/blob/master/README.md&quot;&gt;the official docs&lt;/a&gt;, because I
have an unusual situation where my API actually authenticates with &lt;em&gt;another&lt;/em&gt;
API for its login process.&lt;/p&gt;

&lt;p&gt;Basically, you will want to override &lt;code class=&quot;highlighter-rouge&quot;&gt;authenticate(password)&lt;/code&gt; if you want
your authentication to entail something other than simply checking the user’s
password:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Do your custom authentication here.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Return `true` if the auth should succeed, or `false` if it should fail.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without sharing too much private code, my override looks something like
this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ... I do a few things up here, then...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# `login` is a custom method of mine, not a knock thing.&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last_logged_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Another custom thing of mine.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This returns true if the updates I made to the user succeed.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This causes the auth to fail.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You don’t have to make modifications to your user in your
&lt;code class=&quot;highlighter-rouge&quot;&gt;authenticate(password)&lt;/code&gt;. I do, but you don’t have to. All you need to do
is make sure your &lt;code class=&quot;highlighter-rouge&quot;&gt;authenticate(password)&lt;/code&gt; returns either &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-controllers&quot;&gt;The Controllers&lt;/h2&gt;

&lt;p&gt;You need to create a controller for knock. Please note that if you have
any issues, try naming your controllers and routes exactly like mine.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;controllers/&lt;/code&gt;, create a &lt;code class=&quot;highlighter-rouge&quot;&gt;user_token_controller.rb&lt;/code&gt; file with these
contents:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserTokenController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Knock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AuthTokenController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s right: empty controller. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Knock::AuthTokenController&lt;/code&gt; that it
inherits from provides everything you need.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Unless&lt;/em&gt;, of course, you’re using a non-standard auth setup &lt;a href=&quot;#further-steps-for-non-default-auth&quot;&gt;as mentioned
above&lt;/a&gt;. In that case, you’ll want to
override the &lt;code class=&quot;highlighter-rouge&quot;&gt;auth_params&lt;/code&gt;. For instance, if your auth setup uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;
instead of an &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt;, your controller might look something like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserTokenController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Knock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AuthTokenController&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;auth_params&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Without overriding the auth_params here, you get &quot;unpermitted&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   parameter&quot; errors for username. The call seems to work anyway,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   but this eliminates the error message from your logs.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My app is namespaced, so my full controller actually looks like &lt;em&gt;this&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Api&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserTokenController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Knock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AuthTokenController&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;auth_params&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In that &lt;code class=&quot;highlighter-rouge&quot;&gt;permit(...)&lt;/code&gt;, you should permit params you need for your
authentication process. Mine just takes a username and password.&lt;/p&gt;

&lt;p&gt;Second, at the top of your &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationController&lt;/code&gt; in
&lt;code class=&quot;highlighter-rouge&quot;&gt;controllers/application_controller.rb&lt;/code&gt;, add these lines:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Knock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Authenticable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:authenticate_user&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Optional, see below&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That first line is required. The second line is optional. When you add it to
&lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationController&lt;/code&gt;, it blocks access to all of your controllers for
any request that doesn’t include a valid JWT token in its header – except
for the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserTokenController&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;UserTokenController&lt;/code&gt; inherits from
&lt;code class=&quot;highlighter-rouge&quot;&gt;Knock::AuthTokenController&lt;/code&gt;, so it can be accessed without a JWT token for
the purpose of actually &lt;em&gt;getting&lt;/em&gt; the JWT token. It looks like knock is
smart enough to take care of that for you; you don’t have to add any special
rules to &lt;code class=&quot;highlighter-rouge&quot;&gt;UserTokenController&lt;/code&gt; to allow this special access for authentication.&lt;/p&gt;

&lt;h2 id=&quot;the-route&quot;&gt;The Route&lt;/h2&gt;

&lt;p&gt;Add a route in &lt;code class=&quot;highlighter-rouge&quot;&gt;config/routes.rb&lt;/code&gt; that looks like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user_token#create&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I confirmed that the first part, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;/auth&quot;&lt;/code&gt;, can be whatever you want.
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;/login&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;/user_token&lt;/code&gt;, whatever. The second part is required though –
you need to point to that &lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt; action. You didn’t have to write a &lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt;
action yourself, because it’s automagically provided by
&lt;code class=&quot;highlighter-rouge&quot;&gt;Knock::AuthTokenController&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;You may need to configure knock via an initializer, which is a file you can
create at &lt;code class=&quot;highlighter-rouge&quot;&gt;config/initializers/knock.rb&lt;/code&gt; with these contents:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Knock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This initializer can be given a few different options, as detailed in &lt;a href=&quot;https://github.com/nsarno/knock/blob/master/README.md&quot;&gt;the
docs&lt;/a&gt;. You may need to add some of those.&lt;/p&gt;

&lt;p&gt;My app ran fine locally in my development environment without any options, but
for production, I had to configure the signature key, like so:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Knock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;token_secret_signature_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without that line, I was getting a fatal error in my &lt;code class=&quot;highlighter-rouge&quot;&gt;log/production.log&lt;/code&gt; that
began like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TypeError (no implicit conversion of nil into String)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Locally, where my app seemed to work with an empty initializer, I tried
deleting that &lt;code class=&quot;highlighter-rouge&quot;&gt;knock.rb&lt;/code&gt; inititalizer file entirely, and my app seemed to run
fine (locally) without it, so it doesn’t seem that the file is required if you
don’t need to configure anything.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;give-it-a-go&quot;&gt;Give It a Go&lt;/h2&gt;

&lt;p&gt;At this point, you should restart your Rails app. Then use a REST client
to see if things are working.&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; request to your route (my path is &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000/api/v1/auth&lt;/code&gt;)
might look like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demouser@example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;testingpassword123&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or if you have a non-standard auth setup &lt;a href=&quot;#further-steps-for-non-default-auth&quot;&gt;as mentioned
above&lt;/a&gt;, your request body might need to
look different. For instance, if your setup uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; instead of an
&lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt;, it might look like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demouser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;testingpassword123&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From what I can tell, that &lt;code class=&quot;highlighter-rouge&quot;&gt;auth&lt;/code&gt; object is necessary, something knock looks
for. I didn’t define it anywhere; knock just expects your params to be wrapped
in it.&lt;/p&gt;

&lt;p&gt;Don’t forget to include a header with &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; set to &lt;code class=&quot;highlighter-rouge&quot;&gt;application/json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should get back something like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;jwt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1OTI1MDc4MjcsInN1YiI6NH0.0gTKH4rmDFvI-mZmHIB52CooUDIEYZjQ1aLnX0DVT6w&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add that long string as a &lt;code class=&quot;highlighter-rouge&quot;&gt;Bearer&lt;/code&gt; token to the auth header of further
requests, and you should be all set. Without this token, your requests should
return a &lt;code class=&quot;highlighter-rouge&quot;&gt;401 Unauthorized&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, in your controllers, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;current_user&lt;/code&gt; to access the auth’d user.&lt;/p&gt;

&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;If you’re having any troubles with this post whatsoever, first try naming
your things exactly how I name mine. Everything. I’m not sure – since I
just figured this stuff out – but I think some things might need to be named
in a certain way, at least by default.&lt;/p&gt;

&lt;p&gt;Second, take a closer look at the &lt;a href=&quot;https://github.com/nsarno/knock/blob/master/README.md&quot;&gt;official docs&lt;/a&gt; and the configuration
options &lt;a href=&quot;#configuration&quot;&gt;I mention above&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Figuring this stuff out today was a bit of a drag, and I know there are other
people out there who are frustrated, going through the same thing. Knock is
great but it’s in a bit of a weird place right now. Don’t hesitate to
&lt;a href=&quot;mailto:hello@davidgay.org&quot;&gt;email me&lt;/a&gt; with any questions you have, and I’ll try to point you in the
right direction.&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Questions, comments, or tips for me? See a mistake in this post? &lt;a href=&quot;mailto:hello@davidgay.org&quot;&gt;Send me an
email.&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Gay</name>
          
          
        </author>
      

      
        <category term="programming" />
      

      
        <category term="ruby" />
      
        <category term="rails" />
      
        <category term="jwt" />
      
        <category term="auth" />
      
        <category term="knock" />
      
        <category term="gem" />
      
        <category term="token" />
      
        <category term="api" />
      

      
        <summary type="html">This post explains how to set up and use the knock gem for JWT auth in your Rails 6 API. Currently, the whole knock situation is a bit confusing. From what I can tell, a new maintainer took over (thank you!) and is trying to get a solid release out the door, the first in three years. Unfortunately, the existing docs and blog posts available on knock are sometimes unclear or outdated. But I figured out how to get things working in Rails 6, and now you can, too.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">My Favorite Mac Apps After Two Years</title>
      
      
      <link href="https://davidgay.org/software/favorite-mac-apps-after-two-years/" rel="alternate" type="text/html" title="My Favorite Mac Apps After Two Years" />
      
      <published>2020-06-07T10:50:00-04:00</published>
      <updated>2020-06-07T10:50:00-04:00</updated>
      <id>https://davidgay.org/software/favorite-mac-apps-after-two-years</id>
      <content type="html" xml:base="https://davidgay.org/software/favorite-mac-apps-after-two-years/">&lt;p&gt;Around the beginning of 2018, I made the switch to using a MacBook for
virtually everything I do. I had been a fan of the iPhone for some time and
after a long history with Linux and Windows, I developed an interest in
giving the Mac a try. Since then, I’ve been using a MacBook Pro pretty much
exclusively.&lt;/p&gt;

&lt;p&gt;Over two years later, here’s a list of the apps that made it onto my MacBook
and stayed.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In no particular order:&lt;/p&gt;

&lt;h2 id=&quot;things&quot;&gt;&lt;a href=&quot;https://culturedcode.com/things/&quot;&gt;Things&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Okay, this one might actually be in particular order. &lt;a href=&quot;https://culturedcode.com/things/&quot;&gt;Things&lt;/a&gt; is possibly
the nicest app I’ve used in my entire life. It has near-perfect synergy with
how my brain works and it sparks joy every time I use it, which is constantly.
Absolute beauty, keyboard shortcuts, a just-right organizational system, &lt;em&gt;start
dates&lt;/em&gt; (oh, how many tasks managers don’t have &lt;em&gt;start dates!&lt;/em&gt;), a helper (for
creating todos from anywhere on your system and automatically adding a link to
the page, email, or whatever that you have open), and the list goes on.&lt;/p&gt;

&lt;p&gt;Everything goes into Things. I add articles to read, questions to answer,
things to check on, and minuscule reminders. If it comes to mind, I get it out
of mind, and into Things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other task managers I’ve tried:&lt;/strong&gt; Taskwarrior, Todoist, Apple Reminders,
markdown checkbox lists&lt;/p&gt;

&lt;h2 id=&quot;1password&quot;&gt;&lt;a href=&quot;https://1password.com/&quot;&gt;1Password&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://1password.com/&quot;&gt;1Password&lt;/a&gt; is another app that sparks joy. It’s quite pretty and both
the Mac and iPhone apps quickly handle passwords, OTPs, credit card info,
and other sensitive bits with minimal friction. Every other password manager
I’ve tried feels noticeably worse and doesn’t work as well (or as often).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other password managers I’ve tried:&lt;/strong&gt; Dashlane, LastPass, pass, KeePass&lt;/p&gt;

&lt;h2 id=&quot;iterm-2&quot;&gt;&lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm 2&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm&lt;/a&gt;, you just have to use it. If you’re using the built-in Terminal.app,
you’re missing out. That’s all there is to say. Install iTerm, get yourself
a nice theme, and learn some shortcuts.&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;https://en.wikipedia.org/wiki/Tmux&quot;&gt;Tmux&lt;/a&gt; with iTerm for a while since I was used to in on Linux. I
eventually dropped it because iTerm can do all the things I used tmux for,
plus OS-native window and tab management.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other terminal emulators I’ve tried:&lt;/strong&gt; Terminal.app, MobaXterm on Windows,
and many of the Linux offerings&lt;/p&gt;

&lt;h2 id=&quot;alfred&quot;&gt;&lt;a href=&quot;https://www.alfredapp.com/&quot;&gt;Alfred&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.alfredapp.com/&quot;&gt;Alfred&lt;/a&gt; Powerpack was a huge value purchase. For about $25 I got so
much more than a supercharged launcher. Through built-in features and
open-source “workflows” (extensions), I locate and manipulate files, access
clipboard history, quickly enter snippets like my email address and the
( ͡° ͜ʖ ͡°) face (my word, Lenny doesn’t look great in this font), grab contacts,
look up and spell words, do calculations, access &lt;a href=&quot;https://1password.com/&quot;&gt;1Password&lt;/a&gt;, run commands
in &lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm&lt;/a&gt;, open GitHub repos, search Stack Overflow/Exchange, control
Spotify, search Smart Folders, and paste emojis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other launchers I’ve tried:&lt;/strong&gt; Spotlight, and assorted Linux and Windows
launchers that completely pale in comparison&lt;/p&gt;

&lt;h2 id=&quot;backblaze&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tmux&quot;&gt;Backblaze&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tmux&quot;&gt;Backblaze&lt;/a&gt;, paired with Time Machine, is the core of my backup strategy.
It’s fantastic software that backs up your entire machine with absolutely zero
effort on your part. The best backup system is the one you actually use. And
you’d have to actually &lt;em&gt;try&lt;/em&gt; to not run your backup with Backblaze. And
because it backs up everything except the files you tell it not to, there’s
super-low friction.&lt;/p&gt;

&lt;p&gt;If you’re interested, &lt;a href=&quot;https://secure.backblaze.com/r/00opuv&quot;&gt;sign up with this link&lt;/a&gt; and we both get a free month.
Otherwise, just use one of the links above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other backup systems I’ve tried:&lt;/strong&gt; I rolled my own backups on Linux and
Windows.&lt;/p&gt;

&lt;h2 id=&quot;tripmode&quot;&gt;&lt;a href=&quot;https://www.tripmode.ch/&quot;&gt;TripMode&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tripmode.ch/&quot;&gt;TripMode&lt;/a&gt; is &lt;em&gt;so nice&lt;/em&gt; for absolutely any travel or public wifi use. You
can easily control which programs have access to the network, and how much data
you want to go through. I use it every time I’m working from somewhere other
than my house or office.&lt;/p&gt;

&lt;h2 id=&quot;calibre&quot;&gt;&lt;a href=&quot;https://secure.backblaze.com/r/00opuv&quot;&gt;Calibre&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;It looks a bit dated (and it is), but &lt;a href=&quot;https://secure.backblaze.com/r/00opuv&quot;&gt;Calibre&lt;/a&gt; is a good way to manage
your eBook and PDF library. I mainly use it for converting files between PDF,
EPUB, and MOBI formats, which it does to my satisfaction. Apple Books looks
more modern, but Calibre beats it in usefulness.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other eBook managers I’ve tried:&lt;/strong&gt; Apple Books&lt;/p&gt;

&lt;h2 id=&quot;dozer&quot;&gt;&lt;a href=&quot;https://github.com/Mortennn/Dozer&quot;&gt;Dozer&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Mortennn/Dozer&quot;&gt;Dozer&lt;/a&gt; is a free and open-source alternative to Bartender. It tidies up
your menu bar by hiding the icons you don’t want to see. I use Dozer to hide
everything but wifi, battery, and the time.&lt;/p&gt;

&lt;h2 id=&quot;eqmac&quot;&gt;&lt;a href=&quot;https://eqmac.app/&quot;&gt;eqMac&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;MacOS doesn’t have a built-in equalizer, and sometimes I like to use one,
especially when playing music on speakers. &lt;a href=&quot;https://eqmac.app/&quot;&gt;eqMac&lt;/a&gt; is open-source and
does what it says on the can.&lt;/p&gt;

&lt;h2 id=&quot;firefox&quot;&gt;&lt;a href=&quot;https://www.mozilla.org/firefox&quot;&gt;Firefox&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I tried Safari for a while, but I’m a &lt;a href=&quot;https://www.mozilla.org/firefox&quot;&gt;Firefox&lt;/a&gt; guy at heart. What can I
say. I love the concern for privacy, and Sync is great.&lt;/p&gt;

&lt;h2 id=&quot;grandperspective&quot;&gt;&lt;a href=&quot;http://grandperspectiv.sourceforge.net/&quot;&gt;GrandPerspective&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I know there are sexier disk usage analyzers out there, but
&lt;a href=&quot;http://grandperspectiv.sourceforge.net/&quot;&gt;GrandPerspective&lt;/a&gt; is free, and it gets the job done. Sourceforge
throwback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other disk usage analyzers I’ve tried:&lt;/strong&gt; WinDirStat on Windows&lt;/p&gt;

&lt;h2 id=&quot;insomnia&quot;&gt;&lt;a href=&quot;https://insomnia.rest/&quot;&gt;Insomnia&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://insomnia.rest/&quot;&gt;Insomnia&lt;/a&gt; is both sexier and faster than Postman, and most developers
need a good REST client.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other REST clients I’ve tried:&lt;/strong&gt; Postman&lt;/p&gt;

&lt;h2 id=&quot;karabiner-elements&quot;&gt;&lt;a href=&quot;https://karabiner-elements.pqrs.org/&quot;&gt;Karabiner-Elements&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Most of the time I’m using my customized &lt;a href=&quot;https://mechanicalkeyboards.com/shop/index.php?l=product_list&amp;amp;c=165&quot;&gt;Vortex Pok3r&lt;/a&gt;, but when I’m on
the built-in keyboard, I have to make some changes. Most importantly,
&lt;a href=&quot;https://karabiner-elements.pqrs.org/&quot;&gt;Karabiner-Elements&lt;/a&gt; lets me map &lt;code class=&quot;highlighter-rouge&quot;&gt;caps lock&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt; to arrow
keys. Critical stuff.&lt;/p&gt;

&lt;h2 id=&quot;amphetamine&quot;&gt;&lt;a href=&quot;https://apps.apple.com/us/app/amphetamine/id937984704?mt=12&quot;&gt;Amphetamine&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Sometimes you don’t want your computer to go to sleep. Unfortunately, macOS
needs a little extra help with that. &lt;a href=&quot;https://apps.apple.com/us/app/amphetamine/id937984704?mt=12&quot;&gt;Amphetamine&lt;/a&gt; is free and does the
job.&lt;/p&gt;

&lt;h2 id=&quot;spotify&quot;&gt;&lt;a href=&quot;https://www.spotify.com/&quot;&gt;Spotify&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The music might not be lossless (Dear Spotify: I’d pay extra!), but
&lt;a href=&quot;https://www.spotify.com/&quot;&gt;Spotify&lt;/a&gt; has reasonable audio quality, and the selection and convenience
is hard to argue with.&lt;/p&gt;

&lt;h2 id=&quot;vlc&quot;&gt;&lt;a href=&quot;https://www.videolan.org/vlc/index.html&quot;&gt;VLC&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Sometimes, Mac’s built-in options don’t cut it for media playback, so I use
the tried and true &lt;a href=&quot;https://www.videolan.org/vlc/index.html&quot;&gt;VLC&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;vimr&quot;&gt;&lt;a href=&quot;https://github.com/qvacua/vimr&quot;&gt;VimR&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/qvacua/vimr&quot;&gt;VimR&lt;/a&gt; is one for you (Neo)vim fans out there. Sometimes I want to quickly
open and tweak text files from Finder, and &lt;a href=&quot;https://github.com/qvacua/vimr&quot;&gt;VimR&lt;/a&gt; handles that nicely,
allowing me to use Vim and my &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt; along the way.&lt;/p&gt;

&lt;h2 id=&quot;xnip&quot;&gt;&lt;a href=&quot;https://xnipapp.com/&quot;&gt;Xnip&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://xnipapp.com/&quot;&gt;Xnip&lt;/a&gt; is the nicest screenshotting tool I’ve tried. It’s smooth, has
plenty of free features, and Just Works™️.&lt;/p&gt;

&lt;h2 id=&quot;slack&quot;&gt;&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Everyone and their grandmother uses &lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; now, so that means I do, too.
It’s alright, though I wish it was native and not Electron.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other messaging tools I’ve used:&lt;/strong&gt; IRC (Remember IRC? It’s still around.
We could go back; it’s not too late. Anyone?)&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Questions, comments, or tips for me? See a mistake in this post? &lt;a href=&quot;mailto:hello@davidgay.org&quot;&gt;Send me an
email.&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Gay</name>
          
          
        </author>
      

      
        <category term="software" />
      

      
        <category term="mac" />
      
        <category term="apple" />
      
        <category term="apps" />
      
        <category term="tools" />
      
        <category term="favorites" />
      
        <category term="list" />
      

      
        <summary type="html">Around the beginning of 2018, I made the switch to using a MacBook for virtually everything I do. I had been a fan of the iPhone for some time and after a long history with Linux and Windows, I developed an interest in giving the Mac a try. Since then, I’ve been using a MacBook Pro pretty much exclusively. Over two years later, here’s a list of the apps that made it onto my MacBook and stayed.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Quick and Clear Polymorphic Has Many Through Associations in Rails</title>
      
      
      <link href="https://davidgay.org/programming/rails-polymorphic-has-many-through/" rel="alternate" type="text/html" title="Quick and Clear Polymorphic Has Many Through Associations in Rails" />
      
      <published>2020-05-31T15:29:00-04:00</published>
      <updated>2020-05-31T15:29:00-04:00</updated>
      <id>https://davidgay.org/programming/rails-polymorphic-has-many-through</id>
      <content type="html" xml:base="https://davidgay.org/programming/rails-polymorphic-has-many-through/">&lt;p&gt;This weekend I spent &lt;em&gt;too long&lt;/em&gt; trying to get the Internet to tell me how to
set up a polymorphic &lt;code class=&quot;highlighter-rouge&quot;&gt;has_many :through&lt;/code&gt; relationship in Rails. The official
docs don’t go into this topic. It took me a bit to put the pieces together, so
I’m sharing here for posterity.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;This post uses Ruby 2.7.1, Rails 6.0.3.1, and PostgreSQL 12.2, but it should
work fine with other databases, and I have no reason to expect that the
solution described herein will become invalid any time soon.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;I’ll briefly describe my situation, so you can adapt it to your own.
In my scenario, I began with three models that I had to associate:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An &lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt; can be located at a &lt;code class=&quot;highlighter-rouge&quot;&gt;Place&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Place&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; can have a certain number of the same &lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt;, which
I decided to track through a &lt;code class=&quot;highlighter-rouge&quot;&gt;quantity&lt;/code&gt; integer. This is what told me I
needed a &lt;code class=&quot;highlighter-rouge&quot;&gt;has_many :through&lt;/code&gt; – I needed a join table to track the &lt;code class=&quot;highlighter-rouge&quot;&gt;quantity&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can easily substitute your own tables. Instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Place&lt;/code&gt;, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt;, you could use &lt;code class=&quot;highlighter-rouge&quot;&gt;Bill&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Supplier&lt;/code&gt; (if a &lt;code class=&quot;highlighter-rouge&quot;&gt;Bill&lt;/code&gt; could
be owned by a &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Supplier&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;process&quot;&gt;Process&lt;/h2&gt;

&lt;p&gt;You don’t need to perform any migrations on your starting three tables. In my
case, I had created &lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Place&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; before realizing I needed
a polymorphic &lt;code class=&quot;highlighter-rouge&quot;&gt;has_many :through&lt;/code&gt;, and I could leave them as they were.&lt;/p&gt;

&lt;p&gt;I needed to create the join table. I decided to call the model &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt;,
which I generated like so:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/rails g model ItemStack quantity:integer item:references itemable:references
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I opened the generated migration and changed it to look like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateItemStacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:item_stacks&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:quantity&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;references&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;references&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:itemable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;polymorphic: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timestamps&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So there’s three things in there. In order:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;quantity&lt;/code&gt; integer (which made the &lt;code class=&quot;highlighter-rouge&quot;&gt;has_many :through&lt;/code&gt; necessary). You
might have a different attribute (or attributes). It’s whatever you want
on your join table.&lt;/li&gt;
  &lt;li&gt;A reference to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Items&lt;/code&gt; table.&lt;/li&gt;
  &lt;li&gt;A reference for the polymorphic relationship. This is the part which,
for me, links to either the &lt;code class=&quot;highlighter-rouge&quot;&gt;Places&lt;/code&gt; table or the &lt;code class=&quot;highlighter-rouge&quot;&gt;Persons&lt;/code&gt; table.
I called my key &lt;code class=&quot;highlighter-rouge&quot;&gt;:itemable&lt;/code&gt;, because a &lt;code class=&quot;highlighter-rouge&quot;&gt;Place&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; are both
“itemable”, in that they both can have an &lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt;. Not a real word, I know.
I could have used &lt;code class=&quot;highlighter-rouge&quot;&gt;:holdable&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;:graspable&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;:haveable&lt;/code&gt; or something,
but I felt that &lt;code class=&quot;highlighter-rouge&quot;&gt;:itemable&lt;/code&gt; was functionally clear. Again, you can call
this whatever you want. If you had the models &lt;code class=&quot;highlighter-rouge&quot;&gt;Bill&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Supplier&lt;/code&gt;, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt;, and both &lt;code class=&quot;highlighter-rouge&quot;&gt;Supplier&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt; could have a &lt;code class=&quot;highlighter-rouge&quot;&gt;Bill&lt;/code&gt;, you
would probably use &lt;code class=&quot;highlighter-rouge&quot;&gt;:billable&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Run the migration and Rails will take care of setting up the rows you need
for your polymorphic association:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Along with the migration, you have to update your models. Here’s what mine
needed:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:item_stacks&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :item_stacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;source: :itemable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;source_type: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Person&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:places&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :item_stacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;source: :itemable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;source_type: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Place&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Place&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:item_stacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as: :itemable&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :item_stacks&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:item_stacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as: :itemable&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :item_stacks&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemStack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:item&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:itemable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;polymorphic: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty straightforward, except for the &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;source_type&lt;/code&gt; stuff.
You absolutely need to specify those things, even though one might think
Active Record would have enough information to get along without them. The
&lt;code class=&quot;highlighter-rouge&quot;&gt;source_type&lt;/code&gt; is the name of the related model class. That string is actually
used in the database to identify which table the polymorphic foreign key is
for.&lt;/p&gt;

&lt;p&gt;To better understand what I mean, check out an example record for an
&lt;code class=&quot;highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#&amp;lt;ItemStack id: 10, quantity: 11, item_id: 2, itemable_type: &quot;Place&quot;, itemable_id: 2, created_at: &quot;2020-05-31 18:18:53&quot;, updated_at: &quot;2020-05-31 18:18:53&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;… and the schema that was generated by my migration (comments added by me):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item_stacks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;force: :cascade&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;quantity&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bigint&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;itemable_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;lt;- Needed for polymorphic&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bigint&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;itemable_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;lt;- Needed for polymorphic&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;created_at&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;precision: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;updated_at&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;precision: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;item_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index_item_stacks_on_item_id&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;itemable_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;itemable_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index_item_stacks_on_itemable_type_and_itemable_id&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion-and-bonus-content&quot;&gt;Conclusion and Bonus Content&lt;/h2&gt;

&lt;p&gt;That’s all there is to it. Now I can do stuff like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Find ItemStack for Item ID 2 at Place ID 2&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ItemStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;item_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;itemable_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;itemable_type: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Place&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, you can write useful helper methods for your models to make
things more concise, like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# In app/models/item_stack.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_at_place&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;place_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;item_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;itemable_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;place_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;itemable_type: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Place&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And maybe I want to add some validation to my &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# In app/models/item_stack.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;numericality: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;greater_than_or_equal_to: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;only_integer: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:itemable_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:itemable_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And perhaps I’d like any &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt; on a &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Place&lt;/code&gt; to be
destroyed if the &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Place&lt;/code&gt; is destroyed, so I do this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# In app/models/person.rb or app/models/place.rb&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# I add `dependent: :destroy` to this `has_many` line I wrote earlier:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:item_stacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as: :itemable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;dependent: :destroy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once I got the hang of this stuff, it was pretty clear how things worked.
Of course, this is still my first go at polymorphic &lt;code class=&quot;highlighter-rouge&quot;&gt;has_many :through&lt;/code&gt;, and
I’ll update this post if I discover I’ve made any mistakes. But this setup
is working pretty well for me so far.&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Questions, comments, or tips for me? See a mistake in this post? &lt;a href=&quot;mailto:hello@davidgay.org&quot;&gt;Send me an
email.&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Gay</name>
          
          
        </author>
      

      
        <category term="programming" />
      

      
        <category term="rails" />
      
        <category term="ruby" />
      
        <category term="active-record" />
      

      
        <summary type="html">This weekend I spent too long trying to get the Internet to tell me how to set up a polymorphic has_many :through relationship in Rails. The official docs don’t go into this topic. It took me a bit to put the pieces together, so I’m sharing here for posterity.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Fast, Git-Backed, Markdown Notes in Vim with notational-fzf-vim</title>
      
      
      <link href="https://davidgay.org/software/notational-fzf-vim/" rel="alternate" type="text/html" title="Fast, Git-Backed, Markdown Notes in Vim with notational-fzf-vim" />
      
      <published>2020-05-25T14:11:00-04:00</published>
      <updated>2020-05-25T14:11:00-04:00</updated>
      <id>https://davidgay.org/software/notational-fzf-vim</id>
      <content type="html" xml:base="https://davidgay.org/software/notational-fzf-vim/">&lt;p&gt;Like many developers, I like to take notes during the day. And like many
developers, I spent a lot of time trying out different apps and systems for
notetaking, especially during the last couple years. I’ve tried vimwiki,
OneNote, Bear, Gollum, Notion, you name it. Today I’m going to share the system
I’m using now, and what my requirements were.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; &lt;a href=&quot;https://github.com/alok/notational-fzf-vim&quot;&gt;notational-fzf-vim&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;These are must-haves for me, and are responsible for my jumping from system to
system. It’s difficult to find different apps that tick all these boxes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Notes must be in Markdown files.&lt;/li&gt;
  &lt;li&gt;I must be able to easily back up all notes with Git.&lt;/li&gt;
  &lt;li&gt;I must be able to use Vim or Vim-like keybindings.&lt;/li&gt;
  &lt;li&gt;Notetaking app must not look like shit.&lt;/li&gt;
  &lt;li&gt;Notes cannot be locked up within en vogue SaaS app, even if it has a
(probably garbage) export option.&lt;/li&gt;
  &lt;li&gt;I want something more than just manually managing text files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It would also be cool to be able to create links between notes, but only if
they auto-updated when I renamed or moved files. But I could look past a
solution not having linking.&lt;/p&gt;

&lt;p&gt;During my long search, nothing I tried was quite satisfying. I was extremely
frustrated because it seemed like what I wanted was &lt;em&gt;pretty simple&lt;/em&gt; and I felt
like it &lt;em&gt;should&lt;/em&gt; exist, and I knew it &lt;em&gt;could&lt;/em&gt; exist because &lt;a href=&quot;http://notational.net/&quot;&gt;Notational
Velocity&lt;/a&gt; and &lt;a href=&quot;https://brettterpstra.com/projects/nvalt/&quot;&gt;nvAlt&lt;/a&gt; exist, but they didn’t satisfy all my requirements.
I had started building my own solution in Ruby when I found
&lt;a href=&quot;https://github.com/alok/notational-fzf-vim&quot;&gt;notational-fzf-vim&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution-notational-fzf-vim&quot;&gt;Solution: notational-fzf-vim&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/alok/notational-fzf-vim&quot;&gt;notational-fzf-vim&lt;/a&gt; is a simple Vim plugin that gives you Notational
Velocity-like functionality, powered by &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; and &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt;, and nothing
more. Hit your keybinding and search for a file in your configured directories,
or create one if it doesn’t exist. And it’s lightning-fast.&lt;/p&gt;

&lt;p&gt;I’m thrilled to have found it. On top of that, I discovered fzf and ripgrep,
two awesome utilities that I had never seen before and now use daily.&lt;/p&gt;

&lt;p&gt;If you’re interested, there’s a good readme in the &lt;a href=&quot;https://github.com/alok/notational-fzf-vim&quot;&gt;git repo&lt;/a&gt; that will hook
you up proper. It speaks for itself; don’t forget dependencies and required
settings. Follow those instructions, and then you’ll probably want to set a
keybinding. Here’s mine, which activates notational-fzf-vim when I hit &lt;code class=&quot;highlighter-rouge&quot;&gt;F3&lt;/code&gt; in
normal, visual, or insert mode (&lt;code class=&quot;highlighter-rouge&quot;&gt;F3&lt;/code&gt; is fast and easy with my keyboard config):&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;noremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F3&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;NV&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
vnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F3&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;&amp;gt;:&lt;/span&gt;NV&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
inoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F3&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;O&lt;span class=&quot;p&quot;&gt;&amp;gt;:&lt;/span&gt;NV&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;notational-fzf-vim allows me to satisfy all my requirements. Plus I can use the
vim environment I already have, and do Git backups however I want. It doesn’t
have the optional linking I mentioned, but I’m cool with that because using
links would actually be &lt;em&gt;slower&lt;/em&gt; than hitting my &lt;code class=&quot;highlighter-rouge&quot;&gt;:NV&lt;/code&gt; binding and typing. I
know, because I used vimwiki and this is way faster.&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Questions, comments, or tips for me? See a mistake in this post? &lt;a href=&quot;mailto:hello@davidgay.org&quot;&gt;Send me an
email.&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Gay</name>
          
          
        </author>
      

      
        <category term="software" />
      

      
        <category term="notetaking" />
      
        <category term="vim" />
      
        <category term="tools" />
      
        <category term="markdown" />
      
        <category term="fzf" />
      
        <category term="ripgrep" />
      

      
        <summary type="html">Like many developers, I like to take notes during the day. And like many developers, I spent a lot of time trying out different apps and systems for notetaking, especially during the last couple years. I’ve tried vimwiki, OneNote, Bear, Gollum, Notion, you name it. Today I’m going to share the system I’m using now, and what my requirements were.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Intro</title>
      
      
      <link href="https://davidgay.org/meta/intro/" rel="alternate" type="text/html" title="Intro" />
      
      <published>2020-05-22T13:20:00-04:00</published>
      <updated>2020-06-03T05:30:00-04:00</updated>
      <id>https://davidgay.org/meta/intro</id>
      <content type="html" xml:base="https://davidgay.org/meta/intro/">&lt;p&gt;2020 has been a hallmark year for me. Continuing that trend, I’ve decided to
start blogging again. It has been many years since I blogged. I was a young man
then, spry, and filled to the brim with strong opinions on topics with which I
had a nebulous understanding. Now, going on twenty-seven, the sun is beginning
to set on my youth as I transition into my second year paying for health
insurance. The season for commissioning an enchanted painting is passing
me by. Heavy falls the veil of twilight years.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;This website is meant to be a writing project. I’ll be posting about whatever
I’ve been thinking about, doing, or learning. The scope of topics is
ill-defined and the thesis is absent. All I’m promising is writing.&lt;/p&gt;

&lt;p&gt;I hope it will be enjoyable reading, and maybe even useful.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Gay</name>
          
          
        </author>
      

      
        <category term="meta" />
      

      

      
        <summary type="html">2020 has been a hallmark year for me. Continuing that trend, I’ve decided to start blogging again. It has been many years since I blogged. I was a young man then, spry, and filled to the brim with strong opinions on topics with which I had a nebulous understanding. Now, going on twenty-seven, the sun is beginning to set on my youth as I transition into my second year paying for health insurance. The season for commissioning an enchanted painting is passing me by. Heavy falls the veil of twilight years.</summary>
      

      
      
    </entry>
  
  
</feed>

